# 
# The terminator for this device is a serial break (not an ascii break character). 
# This is sent via an asyn option so does not appear here.
#

ExtraInput = Ignore;
ReadTimeout = 50;

#
# This protocol is a bit complicated and uses a lot of binary converters:
#   Commonly used syntax in this file:
#     0           = left-pad number if needed.
#     r           = integer
#     R           = float
#     #           = Least significant byte first
#     (\$1PVNAME) = redirect output to the given record
#

set_phase {
    out "%(\$1ADDRESS)0.1r" 0x80 0x90 "%#0.4r" "%#<skf_modbus>";
}

set_frequency {
    out "%(\$1ADDRESS)0.1r" 0x80 0x60 "%#0.4r" "%#<skf_modbus>";
}

set_gate_width {
    out "%(\$1ADDRESS)0.1r" 0x80 0x8E "%#0.4r" "%#<skf_modbus>";
}

start {
    out "%(\$1ADDRESS)0.1r" 0x80 0x20 0x0 0x0 0x0 0x0 "%#<skf_modbus>";
}

stop {
    out "%(\$1ADDRESS)0.1r" 0x80 0x30 0x0 0x0 0x0 0x0 "%#<skf_modbus>";
}

read_phase_info {
    out "%(\$1ADDRESS)0.1r" 0x80 0xC0 0x0 0x0 0x0 0x0 "%#<skf_modbus>";
    in "%(\$1ADDRESS)01r"  0xC0 0x0 "%(\$1STAT:RAW)01r%(\$1ILK:RAW)02r%(\$1FREQ:RAW)#02r%(\$1PHAS)#R%(\$1GATE)#R%(\$1PHAS:PERCENTOK)#R%#<skf_modbus>";
}

read_rotator_angle {
    out "%(\$1ADDRESS)0.1r" 0x80 0x81 0x0 0x0 0x0 0x0 "%#<skf_modbus>";
    in "%(\$1ADDRESS)01r"  0x81 "%*06r%(\$1ANGLE:ROTATOR:RAW)#04r%#<skf_modbus>";
}

set_rotator_angle {
    out "%(\$1ADDRESS)0.1r" 0x80 0x82 "%#0.4r%#<skf_modbus>";
}

read_phase_delay {
    out "%(\$1ADDRESS)0.1r" 0x80 0x85 0x0 0x0 0x0 0x0 "%#<skf_modbus>";
    in "%(\$1ADDRESS)01r"  0x85 "%*06r%(\$1PHAS:SP:RBV:RAW)#R%#<skf_modbus>";
}
