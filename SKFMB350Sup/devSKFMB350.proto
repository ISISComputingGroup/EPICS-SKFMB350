# 
# The terminator for this device is a serial break (not an ascii break character).
#
# This means holding the serial line low for at least one byte's worth of information.
#
Terminator = "[terminator]"0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0;

set_phase {
    out 0x01 0x80 0x90 "%#0.4r" "%<crc16>";
}

set_frequency {
    out 0x01 0x80 0x60 "%#0.4r" "%<crc16>";
}

set_gate_width {
    out 0x01 0x80 0x8E "%#0.4r" "%<crc16>";
}

start {
    out 0x01 0x80 0x20 0x0 0x0 0x0 0x0 "%<crc16>";
}

stop {
    out 0x01 0x80 0x30 0x0 0x0 0x0 0x0 "%<crc16>";
}

read_phase_info {
    out 0x01 0x80 0xC0 0x0 0x0 0x0 0x0 "%<crc16>";
    in "%*01r" 0xC0 0x0 "%(\$1STAT:RAW)01r%(\$1ILK:RAW)02r%(\$1FREQ:RAW)#02r%(\$1PHAS)R%(\$1GATE)R%(\$1PHAS:PERCENTOK)R";
}

read_rotator_angle {
    out 0x01 0x80 0x81 0x0 0x0 0x0 0x0 "%<crc16>";
    in "%*01r" 0x81 "%*06r%(\$1ANGLE:ROTATOR)#04r";
}

read_phase_delay {
    out 0x01 0x80 0x85 0x0 0x0 0x0 0x0 "%<crc16>";
    in "%*01r" 0x85 "%*06r%(\$1PHAS:SP:RBV:RAW)#04r";
}
